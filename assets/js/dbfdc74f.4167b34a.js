"use strict";(self.webpackChunksap_cloud_sdk_documentation=self.webpackChunksap_cloud_sdk_documentation||[]).push([[5643],{48100:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var n=s(74848),r=s(28453);const o={},a=void 0,c={id:"features/odata/common/batch/combining-requests",title:"combining-requests",description:"You can combine requests within a batch request as you like.",source:"@site/docs-js/features/odata/common/batch/combining-requests.mdx",sourceDirName:"features/odata/common/batch",slug:"/features/odata/common/batch/combining-requests",permalink:"/cloud-sdk/docs/js/features/odata/common/batch/combining-requests",draft:!1,unlisted:!1,editUrl:"https://github.com/SAP/cloud-sdk/edit/main/docs-js/features/odata/common/batch/combining-requests.mdx",tags:[],version:"current",frontMatter:{}},d={},u=[];function i(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["You can combine requests within a ",(0,n.jsx)(t.code,{children:"batch"})," request as you like.\nIn the example below, you combine create requests, update requests, and get requests into one ",(0,n.jsx)(t.code,{children:"batch"})," request.\nRemember, that change requests have to be wrapped in a ",(0,n.jsx)(t.code,{children:"changeset()"})," function.\nPut the create requests into one changeset and combine the update and delete requests into another.\nThe ",(0,n.jsx)(t.code,{children:"GET"})," requests are added to the ",(0,n.jsx)(t.code,{children:"batch"})," request directly without wrapping."]}),"\n",(0,n.jsxs)(t.p,{children:["Once the batch request is executed the response will be an array of sub-responses to the specific changeset and retrieve requests in the order that was given in the request.\nNote, that the sub-responses of a ",(0,n.jsx)(t.a,{href:"#changeset",children:"changeset"})," don't have to be in order."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"async function executeComplexBatch(\n  createAddressRequests: CreateRequestBuilder<BusinessPartnerAddress>[],\n  updateAddressRequests: UpdateRequestBuilder<BusinessPartnerAddress>[],\n  deleteAddressRequests: DeleteRequestBuilder<BusinessPartnerAddress>[],\n  getAddressByIdRequests: GetByKeyRequestBuilder<BusinessPartnerAddress>[]\n) {\n  // Execute batch request\n  const [\n    createAddressesResponse,\n    updateAndDeleteAddressesResponse,\n    ...getAddressesByIdResponses\n  ] = await batch(\n    changeset(...createAddressRequests),\n    changeset(...updateAddressRequests, ...deleteAddressRequests),\n    ...getAddressByIdRequests\n  ).execute(destination);\n\n  // Do something with responses\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>c});var n=s(96540);const r={},o=n.createContext(r);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);