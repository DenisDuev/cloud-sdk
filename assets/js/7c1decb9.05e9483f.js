"use strict";(self.webpackChunksap_cloud_sdk_documentation=self.webpackChunksap_cloud_sdk_documentation||[]).push([[3545],{4542:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var r=n(74848),o=n(28453);const l={},s=void 0,i={id:"features/odata/v4/filter-parent-child",title:"filter-parent-child",description:"Depending on the context of the filter it will either filter the parent or the children.",source:"@site/docs-js_versioned_docs/version-v1/features/odata/v4/filter-parent-child.mdx",sourceDirName:"features/odata/v4",slug:"/features/odata/v4/filter-parent-child",permalink:"/cloud-sdk/docs/js/v1/features/odata/v4/filter-parent-child",draft:!1,unlisted:!1,editUrl:"https://github.com/SAP/cloud-sdk/edit/main/docs-js_versioned_docs/version-v1/features/odata/v4/filter-parent-child.mdx",tags:[],version:"v1",frontMatter:{}},a={},d=[];function c(e){const t={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Depending on the context of the filter it will either filter the parent or the children.\nIn our example, we have a ",(0,r.jsx)(t.code,{children:"PERSON"})," related to zero to N ",(0,r.jsx)(t.code,{children:"FRIENDS"})," which are both of type people."]}),"\n",(0,r.jsxs)(t.p,{children:["If you want to get all people with first name ",(0,r.jsx)(t.code,{children:"John"})," the query is:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"People.requestBuilder().getAll().filter(People.FIRST_NAME.equals('John'));\n"})}),"\n",(0,r.jsxs)(t.p,{children:["If you want to get all people who have at least one friend with the first name ",(0,r.jsx)(t.code,{children:"John"})," the query is:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"People.requestBuilder()\n  .getAll()\n  .filter(People.FRIENDS.filter(any(People.FIRST_NAME.equals('John'))));\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The lambda ",(0,r.jsx)(t.code,{children:"all"})," would enforce that all friends must have the first name ",(0,r.jsx)(t.code,{children:"John"}),".\nThe two queries above filter the parent entity person."]}),"\n",(0,r.jsx)(t.p,{children:"In case you want to get all people but reduce the friends in the response, the filter has to be inside the expand:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"People.requestBuilder()\n  .getAll()\n  .expand(People.FRIENDS.filter(People.FIRST_NAME.equals('John')));\n"})}),"\n",(0,r.jsxs)(t.p,{children:["This will return all people but only the friends with the first name ",(0,r.jsx)(t.code,{children:"John"})," will be included in the response."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var r=n(96540);const o={},l=r.createContext(o);function s(e){const t=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(l.Provider,{value:t},e.children)}}}]);