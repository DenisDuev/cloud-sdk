"use strict";(self.webpackChunksap_cloud_sdk_documentation=self.webpackChunksap_cloud_sdk_documentation||[]).push([[1575],{63958:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"features/multi-tenancy/thread-context","title":"Multitenancy With the Thread Context","description":"This article describes how the SAP Cloud SDK for Java provides an application context that is stored in a thread-safe manner and enables cloud-native features to be used out of the box.","source":"@site/docs-java_versioned_docs/version-v3/features/multi-tenancy/thread-context.mdx","sourceDirName":"features/multi-tenancy","slug":"/features/multi-tenancy/thread-context","permalink":"/cloud-sdk/docs/java/v3/features/multi-tenancy/thread-context","draft":false,"unlisted":false,"editUrl":"https://github.com/SAP/cloud-sdk/edit/main/docs-java_versioned_docs/version-v3/features/multi-tenancy/thread-context.mdx","tags":[],"version":"v3","frontMatter":{"id":"thread-context","title":"Multitenancy With the Thread Context","hide_title":false,"hide_table_of_contents":false,"sidebar_label":"Thread Context","description":"This article describes how the SAP Cloud SDK for Java provides an application context that is stored in a thread-safe manner and enables cloud-native features to be used out of the box.","keywords":["sap","cloud","sdk","thread context","multi tenancy","cloud native","tenant","user","principal","JWT","AuthToken"]},"sidebar":"docsJavaSidebar","previous":{"title":"Certificate-based Authentication","permalink":"/cloud-sdk/docs/java/v3/features/connectivity/mtls"},"next":{"title":"Resilience","permalink":"/cloud-sdk/docs/java/v3/features/resilience/"}}');var s=t(74848),r=t(28453);const i={id:"thread-context",title:"Multitenancy With the Thread Context",hide_title:!1,hide_table_of_contents:!1,sidebar_label:"Thread Context",description:"This article describes how the SAP Cloud SDK for Java provides an application context that is stored in a thread-safe manner and enables cloud-native features to be used out of the box.",keywords:["sap","cloud","sdk","thread context","multi tenancy","cloud native","tenant","user","principal","JWT","AuthToken"]},o=void 0,d={},c=[{value:"What Is a Thread Context?",id:"what-is-a-thread-context",level:2},{value:"How Is a Thread Context Created?",id:"how-is-a-thread-context-created",level:2},{value:"How Can the Thread Context Be Used?",id:"how-can-the-thread-context-be-used",level:2},{value:"Accessing Information",id:"accessing-information",level:3},{value:"Storing Information",id:"storing-information",level:3},{value:"Manipulating HTTP Headers",id:"manipulating-http-headers",level:3},{value:"Create a new RequestHeaderContainer From Scratch",id:"create-a-new-requestheadercontainer-from-scratch",level:4},{value:"Updating an Existing RequestHeaderContainer",id:"updating-an-existing-requestheadercontainer",level:4},{value:"Running Asynchronous Operations",id:"running-asynchronous-operations",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"what-is-a-thread-context",children:"What Is a Thread Context?"}),"\n",(0,s.jsxs)(n.p,{children:["The SAP Cloud SDK for Java provides a so-called ",(0,s.jsx)(n.code,{children:"ThreadContext"}),".\nIt serves as thread-safe storage for potentially sensitive information.\nSpecifically, the following three objects are stored:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The current ",(0,s.jsx)(n.em,{children:"Tenant"})]}),"\n",(0,s.jsxs)(n.li,{children:["The current ",(0,s.jsx)(n.em,{children:"Principal"})," (User)"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.a,{href:"https://jwt.io",children:"JSON Web Token"})," (JWT)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This information is used throughout the SAP Cloud SDK to provide features like tenant and principal isolation, JWT verification and authorization against other systems and services.\nTo ensure different tenants and users are properly isolated in an application, this information is always limited to the thread it was created on unless it is explicitly passed on by the application (see ",(0,s.jsx)(n.a,{href:"#running-asynchronous-operations",children:"Propagating the Thread Context"}),")."]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"Multi-tenancy describes the access of different, technically separated user groups to the same instance of an application.\nIn the terms of XSUAA service, these user groups are called Tenants, while in terms of Identity Authentication Service (IAS) they are called Zones."}),(0,s.jsxs)(n.p,{children:["The SAP Cloud SDK for Java uses the term ",(0,s.jsx)(n.em,{children:"Tenant"})," to refer to both XSUAA Tenants and IAS Zones.\nThis implies, that the ",(0,s.jsx)(n.em,{children:"tenantId"})," exposed in the ",(0,s.jsx)(n.em,{children:"Tenant"})," interface either returns the ",(0,s.jsx)(n.em,{children:"tenantId"})," or ",(0,s.jsx)(n.em,{children:"zoneId"}),", depending on the context you are currently running in."]})]}),"\n",(0,s.jsx)(n.h2,{id:"how-is-a-thread-context-created",children:"How Is a Thread Context Created?"}),"\n",(0,s.jsxs)(n.p,{children:["The SAP Cloud SDK provides a ",(0,s.jsx)(n.a,{href:"https://help.sap.com/doc/b579bf8578954412aea2b458e8452201/1.0/en-US/com/sap/cloud/sdk/cloudplatform/servlet/RequestAccessorFilter.html",children:(0,s.jsx)(n.code,{children:"RequestFilter"})})," that will listen to incoming HTTP requests.\nThis filter will extract ",(0,s.jsx)(n.strong,{children:"all"})," provided HTTP headers from the incoming request and store them in the ",(0,s.jsx)(n.code,{children:"ThreadContext"}),".\nAdditionally, if the ",(0,s.jsx)(n.code,{children:"Authorization"})," header contains a ",(0,s.jsx)(n.code,{children:"JWT"})," from the ",(0,s.jsx)(n.a,{href:"https://blogs.sap.com/2020/04/03/sap-application-router/",children:(0,s.jsx)(n.code,{children:"AppRouter"})}),", the filter will:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Verify this token"}),"\n",(0,s.jsxs)(n.li,{children:["Store it in the ",(0,s.jsx)(n.code,{children:"ThreadContext"})," and"]}),"\n",(0,s.jsxs)(n.li,{children:["Pull the ",(0,s.jsx)(n.em,{children:"Tenant"})," and ",(0,s.jsx)(n.em,{children:"Principal"})," information from it"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Integration with CAP",type:"tip",children:(0,s.jsxs)(n.p,{children:["In case you are using CAP (with the ",(0,s.jsx)(n.code,{children:"cds-integration-cloud-sdk"})," dependency) the Tenant,Principal information and Headers will ",(0,s.jsx)(n.strong,{children:"instead"})," be derived from the ",(0,s.jsx)(n.a,{href:"https://cap.cloud.sap/docs/java/request-contexts",children:"CAP Request Context"}),".\nThat also means that the ",(0,s.jsx)(n.code,{children:"ThreadContext"})," will not be used when accessing this information.\nPlease note that the ",(0,s.jsx)(n.code,{children:"RequestScopedHttpClientCache"})," which is the default being used by the SAP Cloud SDK cannot work with this approach."]})}),"\n",(0,s.jsx)(n.h2,{id:"how-can-the-thread-context-be-used",children:"How Can the Thread Context Be Used?"}),"\n",(0,s.jsx)(n.h3,{id:"accessing-information",children:"Accessing Information"}),"\n",(0,s.jsxs)(n.p,{children:["The Thread context can be accessed via the static ",(0,s.jsx)(n.a,{href:"https://help.sap.com/doc/b579bf8578954412aea2b458e8452201/1.0/en-US/com/sap/cloud/sdk/cloudplatform/thread/ThreadContextAccessor.html",children:(0,s.jsx)(n.code,{children:"ThreadContextAccessor"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For the frequently needed ",(0,s.jsx)(n.em,{children:"HTTP Headers"}),", ",(0,s.jsx)(n.em,{children:"Tenant"}),", ",(0,s.jsx)(n.em,{children:"Principal"}),", and ",(0,s.jsx)(n.em,{children:"JWT"})," there are also dedicated accessors:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"RequestHeaderAccessor"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://help.sap.com/doc/b579bf8578954412aea2b458e8452201/1.0/en-US/com/sap/cloud/sdk/cloudplatform/tenant/TenantAccessor.html",children:(0,s.jsx)(n.code,{children:"TenantAccessor"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://help.sap.com/doc/b579bf8578954412aea2b458e8452201/1.0/en-US/com/sap/cloud/sdk/cloudplatform/security/principal/PrincipalAccessor.html",children:(0,s.jsx)(n.code,{children:"PrincipalAccessor"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://help.sap.com/doc/b579bf8578954412aea2b458e8452201/1.0/en-US/com/sap/cloud/sdk/cloudplatform/security/AuthTokenAccessor.html",children:(0,s.jsx)(n.code,{children:"AuthTokenAccessor"})})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"storing-information",children:"Storing Information"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://help.sap.com/doc/b579bf8578954412aea2b458e8452201/1.0/en-US/com/sap/cloud/sdk/cloudplatform/thread/ThreadContext.html",children:(0,s.jsx)(n.code,{children:"ThreadContext"})})," allows for some manipulation by the application.\nHowever, oftentimes it is more convenient to leverage the ",(0,s.jsx)(n.code,{children:"executeWith...()"})," functionality offered by the dedicated accessors."]}),"\n",(0,s.jsx)(n.p,{children:"Consider a scenario where some part of the code should run on behalf of a specific tenant.\nIn that case you can override the current tenant explicitly:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"TenantAccessor.executeWithTenant(customTenant, () -> doStuff());\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"CAP Integration",type:"caution",children:(0,s.jsxs)(n.p,{children:["The above does not apply for any accessors like ",(0,s.jsx)(n.code,{children:"TenantAccessor"}),", ",(0,s.jsx)(n.code,{children:"PrincipalAccessor"}),", ",(0,s.jsx)(n.code,{children:"RequestHeaderAccessor"})," when using the CAP framework (with the ",(0,s.jsx)(n.code,{children:"cds-integration-cloud-sdk"})," dependency).\nWhen using CAP the Tenant,Principal information and Headers are derived from the ",(0,s.jsx)(n.code,{children:"RequestContext"}),".\nPlease refer to ",(0,s.jsx)(n.a,{href:"https://cap.cloud.sap/docs/java/request-contexts#defining-requestcontext",children:"this section"})," on how to override existing values in the CAP context."]})}),"\n",(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsxs)(n.p,{children:["Be aware, that the ",(0,s.jsx)(n.code,{children:"executeWith"})," methods shown above only replaces the given property, but does not update properties derived from it."]}),(0,s.jsxs)(n.p,{children:["Example: You have a special ",(0,s.jsx)(n.code,{children:"AuthToken"}),", that you propagate with ",(0,s.jsx)(n.code,{children:"AuthTokenAccessor.executeWithAuthToken"}),".\nInside the given code block only the ",(0,s.jsx)(n.code,{children:"AuthToken"})," will be replaced, while e.g. the ",(0,s.jsx)(n.code,{children:"Tenant"})," is the same as in the original context."]}),(0,s.jsxs)(n.p,{children:["If you want to start a fresh context based on a given ",(0,s.jsx)(n.code,{children:"AuthToken"}),", for example accessing information of the provider tenant while in a subscriber context, have a look at this code:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"\nTenant retrieveProviderTenant()\n{\n    // retrieves an access token from the provider context\n    AuthToken providerXsuaaAccessToken = AuthTokenAccessor.getXsuaaServiceToken();\n    return new ThreadContextExecutor()\n        // don't reuse the original context\n        .withoutParentThreadContext()\n        // add the provider token into the new context\n        .withListeners(new AuthTokenThreadContextListener(providerXsuaaAccessToken))\n        // return the actual provider tenant\n        .execute(TenantAccessor::getCurrentTenant);\n}\n\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"manipulating-http-headers",children:"Manipulating HTTP Headers"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"RequestHeaderAccessor#getHeaderContainer()"})," method provides convenient access to the HTTP headers of the current incoming request.\nIt returns an instance of ",(0,s.jsx)(n.code,{children:"RequestHeaderContainer"}),", which is, by API contract, an ",(0,s.jsx)(n.strong,{children:"immutable"})," container that allows ",(0,s.jsx)(n.em,{children:"case insensitive"})," access to HTTP header values.\nAlthough the ",(0,s.jsx)(n.code,{children:"RequestHeaderContainer"})," cannot be altered once created, there are scenarios where manipulating HTTP headers is required.\nIn such cases, a new instance of ",(0,s.jsx)(n.code,{children:"RequestHeaderContainer"})," can be created in a few different ways."]}),"\n",(0,s.jsx)(n.h4,{id:"create-a-new-requestheadercontainer-from-scratch",children:"Create a new RequestHeaderContainer From Scratch"}),"\n",(0,s.jsxs)(n.p,{children:["A common way to represent HTTP headers is to use ",(0,s.jsx)(n.code,{children:"Map<String, String>"})," for ",(0,s.jsx)(n.code,{children:"1:1"})," relationships between header names and values or even ",(0,s.jsx)(n.code,{children:"Map<String, Collection<String>>"})," for ",(0,s.jsx)(n.code,{children:"1:n"})," relationships.\nTo make the transition from either of those representations to the SAP Cloud SDK's ",(0,s.jsx)(n.code,{children:"RequestHeaderContainer"})," as easy as possible, the ",(0,s.jsx)(n.code,{children:"DefaultRequestHeaderContainer"})," offers corresponding factory methods:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fromSingleValueMap(Map<String, String>)"})," and"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"fromMultiValueMap(Map<String, Collection<String>>)"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Besides these two factory methods, the ",(0,s.jsx)(n.code,{children:"DefaultRequestHeaderContainer"})," also offers the possibility to create an instance of ",(0,s.jsx)(n.code,{children:"RequestHeaderContainer.Builder"})," through the static ",(0,s.jsx)(n.code,{children:"builder()"})," method.\nAn example for how the returned ",(0,s.jsx)(n.code,{children:"Builder"})," can be used is shown in the chapter below."]}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, to make customizing the current HTTP headers even easier, the ",(0,s.jsx)(n.code,{children:"RequestHeaderAccessor"})," comes with an overload of the ",(0,s.jsx)(n.code,{children:"executeWithHeaderContainer"})," method that accepts a ",(0,s.jsx)(n.code,{children:"Map<String, String>"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"updating-an-existing-requestheadercontainer",children:"Updating an Existing RequestHeaderContainer"}),"\n",(0,s.jsxs)(n.p,{children:["As pointed out above, the ",(0,s.jsx)(n.code,{children:"RequestHeaderContainer"})," is an ",(0,s.jsx)(n.strong,{children:"immutable"})," structure.\nTherefore, updating an already existing instance is impossible."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"However"}),", in cases where you would like to, for example, just add a new custom header to the set of existing headers, the ",(0,s.jsx)(n.code,{children:"RequestHeaderContainer"})," offers the ",(0,s.jsx)(n.code,{children:"toBuilder"})," method.\nAs the name suggests, this method can be used to retrieve an instance of ",(0,s.jsx)(n.code,{children:"RequestHeaderContainer.Builder"}),".\nIn contrast to the ",(0,s.jsx)(n.code,{children:"RequestHeaderContainer"}),", the ",(0,s.jsx)(n.code,{children:"Builder"})," can be ",(0,s.jsx)(n.strong,{children:"changed"})," as much as needed.\nAdditionally, the ",(0,s.jsx)(n.code,{children:"toBuilder"})," method will make sure that the returned ",(0,s.jsx)(n.code,{children:"Builder"})," instance is already pre-filled with all HTTP headers that are also present in the instance of ",(0,s.jsx)(n.code,{children:"RequestHeaderContainer"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"To make things less theoretical, let's examine an example."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Example: Usage of the Builder"}),(0,s.jsx)(n.p,{children:"Assume your application received an HTTP request that contains the following headers"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Authorization: Bearer DUMMY_JWT"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Set-Cookie: cookie-1; cookie-2"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Accept-Language: en-US"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"x-app-specific-header: customer-value"})}),"\n"]}),(0,s.jsx)(n.p,{children:"These values can be accessed as follows:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'RequestHeaderContainer headers = RequestHeaderAccessor.getHeaderContainer();\nheaders.getHeaderValues("authorization"); // will return ["Bearer DUMMY_JWT"]\nheaders.getHeaderValues("set-cookie"); // will return ["cookie-1", "cookie-2"]\nheaders.getHeaderValues("accept-language"); // will return ["en-US"]\nheaders.getHeaderValues("x-app-specific-header"); // will return ["customer-value"]\n'})}),(0,s.jsx)(n.p,{children:"Note how accessing the values for specific HTTP headers will work independent of the casing of the provided name."}),(0,s.jsxs)(n.p,{children:["Now let's say your use case requires that HTTP cookies shall not be leaked into further application execution.\nAdditionally, you have to make sure that the ",(0,s.jsx)(n.code,{children:"x-app-specific-header"})," contains an additional application provided value.\nLastly, our application should always serve German customers and, therefore, you need to make sure the ",(0,s.jsx)(n.code,{children:"Accept-Language"})," header is always adjusted accordingly."]}),(0,s.jsxs)(n.p,{children:["Using the ",(0,s.jsx)(n.code,{children:"Builder"})," API, fulfilling these requirements is straightforward:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'RequestHeaderContainer updatedHeaders =\n    headers\n        .toBuilder()\n        .withoutHeader("set-cookie")\n        .withHeader("x-app-specific-header", "application-value")\n        .replaceHeader("accept-language", "de-DE")\n        .build();\n'})}),(0,s.jsxs)(n.p,{children:["Once again, the API guarantees that header names are treated ",(0,s.jsx)(n.em,{children:"case insensitively"}),"."]}),(0,s.jsxs)(n.p,{children:["Finally, to make sure the updated headers are also taken into consideration, you have to overwrite the existing headers in our ",(0,s.jsx)(n.code,{children:"ThreadContext"}),".\nThis can be done using the following code:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"RequestHeaderAccessor.executeWithHeaderContainer(updatedHeaders, () -> yourBusinessLogic());\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"running-asynchronous-operations",children:"Running Asynchronous Operations"}),"\n",(0,s.jsxs)(n.p,{children:["As the name suggests the ",(0,s.jsx)(n.code,{children:"ThreadContext"})," is bound to a thread, more specifically to the one it was created.\nIf asynchronous operations need to access the information, it has to be propagated to the new threads."]}),"\n",(0,s.jsx)(n.p,{children:"The following code achieves this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"ThreadContextExecutor executor = new ThreadContextExecutor();\nCallable operationWithContext = () -> executor.execute(() -> operation());\n\ninvokeAsynchronously(operationWithContext);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Take note that the ",(0,s.jsx)(n.code,{children:"ThreadContextExecutor"})," is created ",(0,s.jsx)(n.em,{children:"before"})," performing the asynchronous operation.\nThis is important because only at that time the context is available and will be propagated."]}),"\n",(0,s.jsxs)(n.p,{children:["A similar approach can be applied with the ",(0,s.jsx)(n.code,{children:"RequestHeader"}),", ",(0,s.jsx)(n.code,{children:"Tenant"}),", ",(0,s.jsx)(n.code,{children:"Principal"})," and ",(0,s.jsx)(n.code,{children:"AuthToken"})," accessors.\nThis code runs an asynchronous operation with a dedicated tenant:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Callable operationWithTenant = TenantAccessor.executeWithTenant(customTenant, () -> operation());\n\ninvokeAsynchronously(operationWithContext);\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"CAP Integration",type:"caution",children:(0,s.jsxs)(n.p,{children:["In case you are using CAP the CAP Request Context needs to be passed on instead of the ",(0,s.jsx)(n.code,{children:"ThreadContext"}),".\nPlease refer to ",(0,s.jsx)(n.a,{href:"/cloud-sdk/docs/java/v3/guides/cap-sdk-integration",children:"this guide"})," on how to achieve this."]})}),"\n",(0,s.jsxs)(n.admonition,{title:"Thread Lifecycle",type:"danger",children:[(0,s.jsx)(n.p,{children:"Be cautious with long-running, asynchronous operations.\nA propagated thread context will only persist as long as the thread lives that it was created on.\nWhen the parent thread dies the context will cease to exist and no longer be available in any of the threads."}),(0,s.jsxs)(t,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)("summary",{children:" Workaround "}),"\nYou can work around this limitation with the following approach:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"RequestHeaderContainer requestHeaders = RequestHeaderAccessor.tryGetHeaderContainer().getOrElse(RequestHeaderContainer.EMPTY);\nThreadContextExecutor executor = new ThreadContextExecutor().withThreadContext(new DefaultThreadContext())\n        .withListeners(new RequestHeaderThreadContextListener(requestHeaders));\n\nCallable operationWithContext = () -> executor.execute(() -> operation());\ninvokeAsynchronously(operationWithContext);\n"})})]})]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);