"use strict";(self.webpackChunksap_cloud_sdk_documentation=self.webpackChunksap_cloud_sdk_documentation||[]).push([[35635],{31696:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"features/odata/common/batch/responses","title":"responses","description":"Once a batch request is executed, it returns a list of BatchResponses.","source":"@site/docs-js_versioned_docs/version-v1/features/odata/common/batch/responses.mdx","sourceDirName":"features/odata/common/batch","slug":"/features/odata/common/batch/responses","permalink":"/cloud-sdk/docs/js/v1/features/odata/common/batch/responses","draft":false,"unlisted":false,"editUrl":"https://github.com/SAP/cloud-sdk/edit/main/docs-js_versioned_docs/version-v1/features/odata/common/batch/responses.mdx","tags":[],"version":"v1","frontMatter":{}}');var r=n(74848),o=n(28453);const c={},a=void 0,d={},i=[{value:"<code>ReadResponse</code>",id:"readresponse",level:3},{value:"<code>WriteResponses</code>",id:"writeresponses",level:3},{value:"<code>ErrorResponse</code>",id:"errorresponse",level:3}];function h(e){const s={code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["Once a ",(0,r.jsx)(s.code,{children:"batch"})," request is executed, it returns a list of ",(0,r.jsx)(s.code,{children:"BatchResponse"}),"s.\nThe responses correspond to the retrieve requests and changesets in the same order that they were passed to the ",(0,r.jsx)(s.code,{children:"batch"})," function.\nRequests that were not successful are reflected as ",(0,r.jsx)(s.code,{children:"ErrorResponse"}),"s.\nResponses to successful requests are represented as ",(0,r.jsx)(s.code,{children:"ReadResponse"}),"s for retrieve requests, and ",(0,r.jsx)(s.code,{children:"WriteResponses"})," for changesets."]}),"\n",(0,r.jsxs)(s.p,{children:["To determine if a request was successful use ",(0,r.jsx)(s.code,{children:".isSuccess()"}),".\nThen, depending on the corresponding request, you can parse the response or handle the error."]}),"\n",(0,r.jsx)(s.h3,{id:"readresponse",children:(0,r.jsx)(s.code,{children:"ReadResponse"})}),"\n",(0,r.jsxs)(s.p,{children:["Successful retrieve requests can be cast to ",(0,r.jsx)(s.code,{children:"ReadResponse"}),", which contains the HTTP code, the raw body, and the constructor of the entity that was parsed from the response.\nTo work with an instance of the retrieved entity, you can use the ",(0,r.jsx)(s.code,{children:".as"})," method, which allows you to transform the raw data into an instance of the given constructor.\nNote, that the ",(0,r.jsx)(s.code,{children:".as"})," method transforms the raw data to an array of entities, even if the original request was a ",(0,r.jsx)(s.code,{children:"GetByKeyRequestBuilder"}),".\nAlso note, that retrieve responses can be ",(0,r.jsx)(s.code,{children:"ErrorResponse"}),"s.\nTherefore, it is crucial to check responses for success, before casting them to ",(0,r.jsx)(s.code,{children:"ReadResponse"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["In the example below, we combine a list of ",(0,r.jsx)(s.code,{children:"GetByKeyRequestBuilder"}),"s into one ",(0,r.jsx)(s.code,{children:"batch"})," request and execute it against a destination.\nIf one of the requests was unsuccessful, an error will be thrown.\nOtherwise, the responses are transformed into instances of ",(0,r.jsx)(s.code,{children:"BusinessPartnerAddress"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"async function getAddressesByIds(\n  ...retrieveRequests: GetByKeyRequestBuilder<BusinessPartnerAddress>[]\n): Promise<BusinessPartnerAddress[]> {\n  // Execute batch request combining multiple retrieve requests\n  const batchResponses = await batch(...retrieveRequests).execute(destination);\n\n  // Error handling\n  if (batchResponses.some(response => !response.isSuccess())) {\n    throw new Error('Some of the batch subrequests were not successful.');\n  }\n\n  return batchResponses.reduce(\n    (addresses: BusinessPartnerAddress[], response: BatchResponse) => [\n      ...addresses,\n      // Transform response to an instance of BusinessPartnerAddress\n      ...(response as ReadResponse).as(BusinessPartnerAddress)\n    ],\n    []\n  );\n}\n"})}),"\n",(0,r.jsx)(s.h3,{id:"writeresponses",children:(0,r.jsx)(s.code,{children:"WriteResponses"})}),"\n",(0,r.jsxs)(s.p,{children:["Successful changeset requests can be cast to ",(0,r.jsx)(s.code,{children:"WriteResponses"})," which contains all subresponses for the changeset request.\nThose responses can be accessed by ",(0,r.jsx)(s.code,{children:".responses"})," and have the type ",(0,r.jsx)(s.code,{children:"WriteResponse"}),".\nEach ",(0,r.jsx)(s.code,{children:"WriteResponse"})," contains the HTTP code and can contain the raw body and the constructor of the entity that was parsed from the response, depending on whether there was a body in the response.\nCreate and delete requests typically do not have a response body.\nTo work with an instance of an entity given in a ",(0,r.jsx)(s.code,{children:"WriteResponse"}),", you can use the ",(0,r.jsx)(s.code,{children:".as"})," method, which allows you to transform the raw string body into an instance of the given constructor.\nNote that the response may not exist, so you should only call this method if you know that there is data.\nTypically the HTTP code is a good indicator for this - ",(0,r.jsx)(s.code,{children:"201 No Content"})," probably won't have content.\nIf you are working with TypeScript you will have to tell the compiler, that the ",(0,r.jsx)(s.code,{children:".as!"})," method can be used here by adding a ",(0,r.jsx)(s.code,{children:"!"}),".\nAlso note, that the response to a changeset can be an ",(0,r.jsx)(s.code,{children:"ErrorResponse"}),".\nTherefore, it is crucial to check responses for success, before casting them to ",(0,r.jsx)(s.code,{children:"WriteResponses"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["In the example below, we combine a list of ",(0,r.jsx)(s.code,{children:"UpdateRequestBuilder"}),"s into one ",(0,r.jsx)(s.code,{children:"changeset"})," and pass it to the ",(0,r.jsx)(s.code,{children:"batch"})," request, which we execute against a destination."]}),"\n",(0,r.jsxs)(s.p,{children:["Once we execute the ",(0,r.jsx)(s.code,{children:"batch"})," request, we get a list of ",(0,r.jsx)(s.code,{children:"BatchResponse"}),"s, which contains one response only."]}),"\n",(0,r.jsxs)(s.p,{children:["If the request was unsuccessful, an error will be thrown.\nOtherwise, the subresponses are transformed into instances of ",(0,r.jsx)(s.code,{children:"BusinessPartnerAddress"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"async function updateAddresses(\n  ...updateRequests: UpdateRequestBuilder<BusinessPartnerAddress>\n): Promise<BusinessPartnerAddress[]> {\n  // Execute batch request with one changeset\n  const batchResponses = await batch(\n    // Combine update requests into one changeset\n    changeset(...updateRequests)\n  ).execute(destination);\n\n  // Get response for the changeset request\n  const changesetResponse = batchResponses[0];\n\n  // Error handling\n  if (!changesetResponse.isSuccess()) {\n    throw new Error('The changeset request was not successful.');\n  }\n\n  return changesetResponse.responses.map(response =>\n    // Transform response to an instance of BusinessPartnerAddress\n    response.as!(BusinessPartnerAddress)\n  );\n}\n"})}),"\n",(0,r.jsx)(s.h3,{id:"errorresponse",children:(0,r.jsx)(s.code,{children:"ErrorResponse"})}),"\n",(0,r.jsxs)(s.p,{children:["Unsuccessful retrieve requests and changesets are reflected as ",(0,r.jsx)(s.code,{children:"ErrorResponse"}),"s in the response.\nThose responses have an ",(0,r.jsx)(s.code,{children:"httpCode"})," (a number) and a ",(0,r.jsx)(s.code,{children:"body"})," (a JSON object)."]})]})}function u(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>a});var t=n(96540);const r={},o=t.createContext(r);function c(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);